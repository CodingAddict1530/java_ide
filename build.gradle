/*
 * Copyright 2024 Alexis Mugisha
 * https://github.com/CodingAddict1530
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.2'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id "org.gradlex.extra-java-module-info"  version "1.8"
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.project'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    flatDir(dirs: 'lib/jdt-language-server-1.37.0-202406271335/plugins')
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false

    module('org.eclipse.lsp4j.jsonrpc_0.22.0.v20240213-2011.jar', 'org.eclipse.lsp4j.jsonrpc') {
        requires('com.google.gson')
        requires('java.logging')
        exportAllPackages()
    }
    module('org.eclipse.lsp4j_0.22.0.v20240213-2011.jar', 'org.eclipse.lsp4j') {
        requires('org.eclipse.lsp4j.jsonrpc')
        requires('com.google.gson')
        exportAllPackages()
    }
}

ext {
    junitVersion = '5.10.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.project.javaeditor'
    mainClass = 'com.project.javaeditor.EntryPoint'
}

javafx {
    version = '22.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation(fileTree(dir: 'lib/jdt-language-server-1.37.0-202406271335/plugins', includes: [
            'org.eclipse.lsp4j.jsonrpc_0.22.0.v20240213-2011.jar',
            'org.eclipse.lsp4j_0.22.0.v20240213-2011.jar',
            'com.google.gson_2.10.1.v20230109-0753.jar'
    ]))
    implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.26.1'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.46.0.1'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.7'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.7'
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.11.3'

    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.testfx:testfx-core:4.0.18'
    testImplementation 'org.testfx:testfx-junit5:4.0.18'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

}

jar {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                'Main-Class': 'com.project.javaeditor.Application'
        )
    }
}

shadowJar {
    archiveClassifier.set('all')
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'com.project.javaeditor.EntryPoint'
    }
}

build.dependsOn shadowJar

graalvmNative {
    binaries {
        main {
            imageName = "Fusion IDE"
            mainClass = 'com.project.javaeditor.EntryPoint'
            debug = true
            verbose = true
            fallback = false
            agent {
                buildArgs.add('--initialize-at-build-time=org.sqlite.util.ProcessRunner')
            }

            resources.autodetect()
        }
    }
}

tasks.withType(JavaExec).configureEach {

    if (project.hasProperty("agent")) {
        jvmArgs = [
                '-agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/native-image/,config-write-period-secs=300,config-write-initial-delay-secs=5'
        ]
    }

}

test {
    useJUnitPlatform()
    jvmArgs = [
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=org.testfx',
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
    ]
}

jlink {

    imageZip = project.file("${getLayout().getBuildDirectory()}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    addExtraDependencies('javafx')
    launcher {
        name = 'Fusion IDE'
    }
}

jlinkZip {
    group = 'distribution'
}

